const TelegramBot = require('node-telegram-bot-api');
const User = require('./models/User');

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const pendingUsers = new Map();

// –ö–æ–º–∞–Ω–¥–∞ /start —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
bot.onText(/\/start(.*)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id.toString();
  const name = msg.from.first_name;
  const username = msg.from.username || '';
  
  const startParam = match[1] ? match[1].trim() : '';
  
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: "${startParam}"`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegramId:', telegramId);
    
    const existingUser = await User.findOne({ where: { telegramId } });
    
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', existingUser ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
    if (existingUser) {
      console.log('üîç –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        id: existingUser.id,
        name: existingUser.name,
        userType: existingUser.userType,
        createdAt: existingUser.createdAt
      });
    }
    
    if (existingUser) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Ö–æ–¥–∞
      const authLink = `${process.env.BASE_URL}/auth?tgId=${telegramId}&name=${encodeURIComponent(name)}&username=${username}`;
      
      const userTypeText = existingUser.userType === 'trainer' ? '–¢—Ä–µ–Ω–µ—Ä' : '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å';
      
      const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${name}! üëã

–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ ${userTypeText} –≤ Fitness App!`;

      const keyboard = {
        inline_keyboard: [
          [{
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            url: authLink
          }]
        ]
      };

      bot.sendMessage(chatId, welcomeMessage, {
        reply_markup: keyboard
      });
      return;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
  if (startParam.startsWith('invite_')) {
    const inviteCode = startParam.replace('invite_', '');
    
    try {
      const trainer = await User.findOne({ inviteCode: inviteCode });
      
      if (!trainer) {
        bot.sendMessage(chatId, '‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ.');
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userKey = `invite_${telegramId}`;
      pendingUsers.set(userKey, {
        telegramId,
        name,
        username,
        inviteCode,
        trainerName: trainer.name
      });
      
      const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${name}! üëã

–¢—Ä–µ–Ω–µ—Ä ${trainer.name} –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ Fitness App!

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:`;

      const keyboard = {
        inline_keyboard: [
          [{
            text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ',
            callback_data: `invite_${telegramId}`
          }]
        ]
      };

      bot.sendMessage(chatId, welcomeMessage, {
        reply_markup: keyboard
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.');
    }
    
  } else {
    // –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', name);
    
    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${name}! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fitness App!

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:`;

    const keyboard = {
      inline_keyboard: [
        [{
          text: 'üîê –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞',
          callback_data: `auth_${telegramId}`
        }]
      ]
    };

    bot.sendMessage(chatId, welcomeMessage, {
      reply_markup: keyboard
    });
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userKey = `auth_${telegramId}`;
    pendingUsers.set(userKey, {
      telegramId,
      name,
      username
    });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `üèãÔ∏è Fitness App - –ü–æ–º–æ—â—å

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º  
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –ù–∞–∂–º–∏ /start
2. –ü–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞
3. –û—Ç–∫—Ä–æ–π —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
4. –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞

üîó –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ.`;

  bot.sendMessage(chatId, helpMessage);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const message = callbackQuery.message;
  const data = callbackQuery.data;

  if (data.startsWith('auth_')) {
    // –û–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const telegramId = data.replace('auth_', '');
    const userKey = `auth_${telegramId}`;
    const userData = pendingUsers.get(userKey);
    
    if (!userData) {
      bot.sendMessage(message.chat.id, '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.');
      bot.answerCallbackQuery(callbackQuery.id);
      return;
    }
    
    const authLink = `${process.env.BASE_URL}/auth?tgId=${userData.telegramId}&name=${encodeURIComponent(userData.name)}&username=${userData.username}`;
    
    const keyboard = {
      inline_keyboard: [
        [{
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          url: authLink
        }]
      ]
    };
    
    bot.sendMessage(message.chat.id, 'üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–∞!', {
      reply_markup: keyboard
    });
    
    pendingUsers.delete(userKey);
    
  } else if (data.startsWith('invite_')) {
    // –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const telegramId = data.replace('invite_', '');
    const userKey = `invite_${telegramId}`;
    const userData = pendingUsers.get(userKey);
    
    if (!userData) {
      bot.sendMessage(message.chat.id, '‚ùå –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      bot.answerCallbackQuery(callbackQuery.id);
      return;
    }
    
    try {
      const trainer = await User.findOne({ inviteCode: userData.inviteCode });
      
      if (!trainer) {
        bot.sendMessage(message.chat.id, '‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ.');
        pendingUsers.delete(userKey);
        bot.answerCallbackQuery(callbackQuery.id);
        return;
      }
      
      const authLink = `${process.env.BASE_URL}/auth?tgId=${userData.telegramId}&name=${encodeURIComponent(userData.name)}&username=${userData.username}&invite=${userData.inviteCode}&trainer=${encodeURIComponent(userData.trainerName)}`;
      
      const keyboard = {
        inline_keyboard: [
          [{
            text: 'üöÄ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
            url: authLink
          }]
        ]
      };
      
      bot.sendMessage(message.chat.id, `‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ ${userData.trainerName} –ø—Ä–∏–Ω—è—Ç–æ!`, {
        reply_markup: keyboard
      });
      
      pendingUsers.delete(userKey);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
      bot.sendMessage(message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.');
    }
  }
  
  bot.answerCallbackQuery(callbackQuery.id);
});

module.exports = bot;