document.addEventListener('DOMContentLoaded', function() {
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∏—Ç–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    const token = localStorage.getItem('authToken');
    const userType = localStorage.getItem('userType');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!token || userType !== 'client') {
        window.location.href = '/';
        return;
    }
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const backBtn = document.getElementById('backBtn');
    const clientName = document.getElementById('clientName');
    const logoutBtn = document.getElementById('logoutBtn');
    const todayDate = document.getElementById('todayDate');
    const todayMealsContainer = document.getElementById('todayMealsContainer');
    const trainerInfo = document.getElementById('trainerInfo');
    const weeklyNutritionGrid = document.getElementById('weeklyNutritionGrid');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    backBtn.addEventListener('click', function() {
        window.location.href = '/dashboard/client';
    });
    
    logoutBtn.addEventListener('click', function() {
        localStorage.clear();
        window.location.href = '/logout';
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    loadClientName();
    setTodayDate();
    loadNutritionData();
    
    function loadClientName() {
        clientName.textContent = localStorage.getItem('userName') || '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å';
    }
    
    function setTodayDate() {
        const today = new Date();
        const dateString = today.toLocaleDateString('ru-RU', {
            weekday: 'long',
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
        todayDate.textContent = dateString;
    }
    
    async function loadNutritionData() {
        try {
            const response = await fetch('/api/client/nutrition', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                displayNutritionData(data);
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            displayNoNutrition();
        }
    }
    
    function displayNutritionData(data) {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ
        if (data.trainerName) {
            trainerInfo.textContent = `üë®‚Äçüè´ –°–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç—Ä–µ–Ω–µ—Ä–æ–º: ${data.trainerName}`;
        } else {
            trainerInfo.textContent = 'üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
        }
        
        if (!data.hasNutrition) {
            displayNoNutrition();
            return;
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –±–ª—é–¥–∞
        displayTodayMeals(data.todayMeals);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω
        displayWeeklyNutrition(data.weekNutrition);
    }
    
    function displayTodayMeals(todayMeals) {
        if (todayMeals.length === 0) {
            todayMealsContainer.innerHTML = `
                <div class="no-meals">
                    <div style="font-size: 48px; margin-bottom: 15px;">üçΩÔ∏è</div>
                    <div>–ù–∞ —Å–µ–≥–æ–¥–Ω—è –±–ª—é–¥–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã</div>
                    <div style="font-size: 14px; margin-top: 10px; opacity: 0.7;">
                        –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç—Ä–µ–Ω–µ—Ä—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
                    </div>
                </div>
            `;
            return;
        }
        
        const mealsHTML = todayMeals.map(meal => `
            <div class="meal-item" id="meal-${meal.name.replace(/\s+/g, '-')}">
                <div class="meal-info">
                    <div class="meal-name">${meal.name}</div>
                    <div class="meal-details">
                        <span class="meal-time">üïê ${meal.time.hour}:${meal.time.minute}</span>
                        <span class="meal-calories">${meal.calories} –∫–∫–∞–ª</span>
                    </div>
                </div>
                <div class="meal-actions">
                    <button class="btn-eaten" onclick="markMealAsEaten('${meal.name}')">
                        üçΩÔ∏è –í—ã–ø–æ–ª–Ω–∏–ª
                    </button>
                    <div class="meal-status" style="display: none;">
                        <span class="eaten-status">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
                    </div>
                </div>
            </div>
        `).join('');
        
        todayMealsContainer.innerHTML = mealsHTML;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        loadTodayProgress();
    }
    
    function displayWeeklyNutrition(weekNutrition) {
        if (weekNutrition.length === 0) {
            weeklyNutritionGrid.innerHTML = `
                <div class="no-nutrition">
                    <div style="font-size: 48px; margin-bottom: 15px;">üìÖ</div>
                    <div>–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω</div>
                    <div style="font-size: 14px; margin-top: 10px; opacity: 0.7;">
                        –í–∞—à —Ç—Ä–µ–Ω–µ—Ä –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
                    </div>
                </div>
            `;
            return;
        }
        
        const dayNames = {
            'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
            'wednesday': '–°—Ä–µ–¥–∞', 
            'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
            'friday': '–ü—è—Ç–Ω–∏—Ü–∞',
            'saturday': '–°—É–±–±–æ—Ç–∞',
            'sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        };
        
        const today = new Date().getDay();
        const todayKey = Object.keys(dayNames)[today === 0 ? 6 : today - 1];
        
        const allDays = Object.keys(dayNames);
        
        const nutritionHTML = allDays.map(dayKey => {
            const dayNutrition = weekNutrition.find(w => w.day === dayKey);
            const isToday = dayKey === todayKey;
            
            if (dayNutrition) {
                const totalCalories = dayNutrition.meals.reduce((sum, meal) => sum + meal.calories, 0);
                
                const mealsHTML = dayNutrition.meals
                    .sort((a, b) => a.order - b.order)
                    .map(meal => `
                        <div class="day-meal-item">
                            <div class="meal-info">
                                <div class="meal-item-name">${meal.name}</div>
                                <div class="meal-item-time">üïê ${meal.time.hour}:${meal.time.minute}</div>
                            </div>
                            <div class="meal-item-calories">${meal.calories} –∫–∫–∞–ª</div>
                        </div>
                    `).join('');
                
                return `
                    <div class="day-nutrition-card${isToday ? ' today' : ''}">
                        <div class="day-header">
                            <div class="day-name">${dayNames[dayKey]}</div>
                            <div class="day-total-calories">üî• ${totalCalories} –∫–∫–∞–ª</div>
                        </div>
                        <div class="day-meals-list">
                            ${mealsHTML}
                        </div>
                    </div>
                `;
            } else {
                return `
                    <div class="day-nutrition-card${isToday ? ' today' : ''}">
                        <div class="day-header">
                            <div class="day-name">${dayNames[dayKey]}</div>
                        </div>
                        <div class="no-meals">–ü–∏—Ç–∞–Ω–∏–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</div>
                    </div>
                `;
            }
        }).join('');
        
        weeklyNutritionGrid.innerHTML = nutritionHTML;
    }
    
    function displayNoNutrition() {
        trainerInfo.textContent = 'üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
        
        todayMealsContainer.innerHTML = `
            <div class="no-meals">
                <div style="font-size: 48px; margin-bottom: 15px;">üçΩÔ∏è</div>
                <div>–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω</div>
                <div style="font-size: 14px; margin-top: 10px; opacity: 0.7;">
                    –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç—Ä–µ–Ω–µ—Ä—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
                </div>
            </div>
        `;
        
        weeklyNutritionGrid.innerHTML = `
            <div class="no-nutrition">
                <div style="font-size: 48px; margin-bottom: 15px;">üìÖ</div>
                <div>–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω</div>
                <div style="font-size: 14px; margin-top: 10px; opacity: 0.7;">
                    –í–∞—à —Ç—Ä–µ–Ω–µ—Ä –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
                </div>
            </div>
        `;
    }

    // –û—Ç–º–µ—Ç–∏—Ç—å –±–ª—é–¥–æ –∫–∞–∫ —Å—ä–µ–¥–µ–Ω–Ω–æ–µ
    async function markMealAsEaten(mealName) {
        try {
            const today = new Date().toISOString().split('T')[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
            
            const response = await fetch('/api/client/meal-eaten', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    mealName: mealName,
                    date: today
                })
            });
            
            if (response.ok) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                const mealId = `meal-${mealName.replace(/\s+/g, '-')}`;
                const mealElement = document.getElementById(mealId);
                if (mealElement) {
                    const button = mealElement.querySelector('.btn-eaten');
                    const status = mealElement.querySelector('.meal-status');
                    
                    button.style.display = 'none';
                    status.style.display = 'block';
                }
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    async function loadTodayProgress() {
        try {
            const today = new Date().toISOString().split('T')[0];
            
            const response = await fetch(`/api/client/meal-progress/${today}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                
                // –û—Ç–º–µ—á–∞–µ–º —Å—ä–µ–¥–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞
                data.progress.forEach(meal => {
                    if (meal.isEaten) {
                        const mealId = `meal-${meal.mealName.replace(/\s+/g, '-')}`;
                        const mealElement = document.getElementById(mealId);
                        if (mealElement) {
                            const button = mealElement.querySelector('.btn-eaten');
                            const status = mealElement.querySelector('.meal-status');
                            
                            button.style.display = 'none';
                            status.style.display = 'block';
                        }
                    }
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        }
    }

    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
    window.markMealAsEaten = markMealAsEaten;
});