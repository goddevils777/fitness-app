const express = require('express');
const User = require('../models/User');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const router = express.Router();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
router.post('/generate-link', async (req, res) => {
  try {
    const { telegramId, name, username } = req.body;
    const inviteCode = crypto.randomBytes(32).toString('hex');
    
    const authLink = `${process.env.BASE_URL}/auth?code=${inviteCode}&tgId=${telegramId}`;
    
    res.json({ 
      success: true, 
      authLink,
      inviteCode 
    });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/login', async (req, res) => {
  try {
    const { telegramId, name, username, userType, inviteCode } = req.body;
    
    let user = await User.findOne({ where: { telegramId } });
    let trainerId = null;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –Ω–∞–π—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞
    if (inviteCode) {
      console.log('üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', inviteCode);
      
      const trainer = await User.findOne({ 
        where: { inviteCode: inviteCode, userType: 'trainer' } 
      });
      
      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞:', trainer ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
      if (trainer) {
        console.log('üîç –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä–∞:', {
          id: trainer.id,
          name: trainer.name,
          inviteCode: trainer.inviteCode
        });
      }
      
      if (!trainer) {
        console.log('‚ùå –¢—Ä–µ–Ω–µ—Ä —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return res.status(400).json({ 
          success: false, 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è' 
        });
      }
      trainerId = trainer.id;
      
      // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      await trainer.update({ inviteCode: null });
    }
    
    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await User.create({
        telegramId,
        name,
        username,
        userType,
        trainerId: trainerId
      });
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await user.update({
        name,
        username,
        userType,
        trainerId: trainerId || user.trainerId
      });
    }
    
    const token = jwt.sign(
      { userId: user.id, userType: user.userType },
      process.env.JWT_SECRET,
      { expiresIn: '30d' }
    );
    
    res.json({
      success: true,
      token,
      user: {
        id: user.id,
        name: user.name,
        userType: user.userType,
        hasTrainer: !!user.trainerId
      }
    });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/check-user', async (req, res) => {
  try {
    const { telegramId } = req.body;
    
    const user = await User.findOne({ where: { telegramId } });
    
    if (user) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
      const token = jwt.sign(
        { userId: user.id, userType: user.userType },
        process.env.JWT_SECRET,
        { expiresIn: '30d' }
      );
      
      res.json({
        success: true,
        exists: true,
        token,
        user: {
          id: user.id,
          name: user.name,
          userType: user.userType
        }
      });
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      res.json({
        success: true,
        exists: false
      });
    }
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

module.exports = router;